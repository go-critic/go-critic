// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules/rules.go

package rulesdata


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesRulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\x6f\x73\xdb\xb6\x93\x7e\x6d\x7f\x8a\x2d\x87\x4d\x28\x47\xa6\x1c\x4f\x9b\xe9\x24\x71\x6e\x92\xf8\xd2\xf3\x4c\xfe\x8d\xe3\xb4\x9d\x49\xdd\x10\x22\x57\x14\xce\x20\xc0\x02\xa0\x25\x5e\xea\xef\x7e\x03\x80\xa2\x48\x5a\xa4\x15\x37\xfe\xb5\x2f\x32\xb1\x88\xc5\xb3\x8b\x67\x81\xc5\x2e\x80\x9c\xc4\x17\x24\x45\x48\x85\x2c\x18\xaa\xdd\x5d\x9a\xe5\x42\x6a\x08\x76\x77\xbc\x94\xea\x79\x31\x0d\x63\x91\x4d\xfe\x2c\x88\xa2\xac\xd4\x38\x49\xc5\xbe\x91\x4c\x0b\x22\x93\x49\xa2\x98\xb7\x3b\xda\xdd\x9d\x4c\x12\x11\x3f\x56\x45\x96\x11\x59\xc2\x31\x6a\x8c\xb5\x82\x04\x67\x28\x25\x26\x30\x2b\x78\xac\xa9\xe0\xc0\xa8\x46\x49\x98\x02\x3d\x27\x1a\x62\xc2\x61\x8a\xa0\x68\x96\x33\x3a\xa3\x98\x54\x38\x9a\xa4\x0a\x00\x40\xe9\x92\x21\xe0\x32\x47\x49\x33\xe4\x9a\xb0\x4a\x60\x8a\x33\x21\x11\x9c\x02\x8b\x1e\x8c\xe0\x0b\xcc\x82\x11\x5c\x05\xa3\x4a\x88\xcc\x34\x4a\xa8\x85\x82\xd1\xae\x11\x74\x3f\x3f\x72\x46\xb2\x69\x42\x82\x0c\x12\xc5\xc2\x37\x44\xc7\x73\x94\x23\xf8\xb2\xbb\x93\xb9\x5f\x41\xd4\x01\xf7\x67\x81\xbf\x47\x64\xaa\xac\x8e\x68\x14\xee\xee\xec\xfc\x3a\x47\x89\x41\xf6\xc9\x9b\x79\xe7\xe1\x5b\x91\x60\x78\xa2\x82\xe8\x24\x41\xae\xa3\x11\xdc\xbb\x07\x55\xd3\x19\x2e\x35\x7c\x77\x04\x5e\x4e\x38\x8d\xbd\x4d\x2d\x12\x63\x71\x89\x72\xd5\x66\x14\x79\xe7\xe1\x4b\xc1\x95\xb6\xaa\x4e\xd1\xb8\x25\xf0\x0c\x67\x12\x17\x92\x6a\x04\xa2\xa0\xb2\xd2\x18\x67\x6d\x8b\xbc\xd1\xee\xc0\x18\xf2\x8b\x34\xbc\xed\x40\x9a\x26\x55\x9f\xf2\x8b\xd4\x3b\x0f\xdf\x4d\xff\x17\x63\x6d\x7b\xbc\xbf\x48\xdf\x92\x0c\xa3\xd1\x36\x36\xaf\x8c\xa9\x0d\xbf\xea\x9f\x48\xb9\xc4\x98\x68\x4c\x80\x8a\x09\x15\x85\xa6\x0c\x56\x33\xb7\x50\x24\x45\xf5\xb5\x53\xc7\x81\x84\xa7\x48\x92\xe7\x8c\x05\xb2\x3b\x6b\xa8\x68\xb6\xd9\x99\xe3\xba\x1c\xd7\xb6\x0c\x4d\x9e\x0e\xbc\xff\xb9\x22\xba\xa2\xa4\xd3\x0e\xb4\x39\xc6\x31\x14\x0a\x1b\x06\x00\xe5\x4a\x23\x49\xa2\x96\x6b\x1b\x08\xaf\x28\xc3\x41\x15\x46\x60\x93\x0e\xa1\x1a\xcd\x03\x4a\x7e\x35\xae\xab\xb4\x8c\xc1\xfd\xdb\xac\xad\x96\xec\x51\xd7\x68\xbf\x61\x50\xc7\x54\x0e\x8e\xe9\x98\xca\x81\x21\xd9\xd6\x01\x0d\x6f\x45\xfe\x92\x09\x85\xfd\x3a\x6a\x89\x1e\xe7\x34\xda\x07\xf4\x1c\x53\x15\x13\x99\x6c\xd4\x50\xb5\xf5\xe0\xd7\xad\x35\x7a\xef\xf2\x50\x85\xca\x69\x4c\x45\xa1\x20\x2b\x34\x2e\x81\x89\xf8\x62\x52\x70\xf3\x1f\x88\x1c\x25\x31\xc1\xb7\xbb\x44\x12\x4a\x52\x2e\x94\xa6\xf1\xd0\x3a\xc9\x8a\xf0\xb5\x88\x2f\x82\xd1\x13\xf3\xe7\x47\x8b\x79\x2d\xc4\x36\x84\xdc\xda\x6e\x8a\xda\xb5\x33\x25\x89\x95\xb8\xbe\x64\x26\x13\x88\xb2\xe2\x61\x04\x84\x27\xe6\xaf\xc3\x08\x88\x44\x20\x49\x82\x09\x68\x01\x19\xb9\x40\xc8\x85\x52\x74\xca\x10\xa4\xa5\x10\x08\x30\xca\x11\x16\x26\x6c\x41\x94\x1d\x46\x86\xc4\x42\x61\x02\xc1\x82\xea\x39\x10\x67\x87\xf1\xc8\x64\x02\x5c\xb8\x9f\x0d\xf7\xf8\x59\xf1\xb0\xb6\xd9\xcf\x8a\xc3\xda\xde\x4e\x40\xcc\x8a\x87\xab\x30\x7d\x74\x04\xf6\xc3\x61\xf5\xa1\xe5\x53\x37\x6e\xaa\x20\xa3\x4a\x51\x9e\x8e\x2b\x57\x18\xbb\x2c\xb2\x89\x5d\x59\x86\x09\x25\x1a\x59\xe9\xb4\x3c\xd7\xc1\x0a\xb1\x35\x79\xac\x75\xa7\x2d\xf3\x4e\xff\x05\xf6\x4d\x26\x90\xd0\xd9\x0c\x25\x72\x0d\xdd\xc9\xd5\xc3\x6d\x15\xeb\xbf\xc5\x10\x1a\xd3\xdc\x99\x3c\x86\x8c\x94\x53\x04\x87\x0b\x0b\xa2\x80\x72\x8d\x3c\xc1\xe4\xbf\xbe\x86\xe0\x86\x8d\x77\x65\xe2\xe9\xd6\x36\x1a\x92\x45\x61\xe6\xba\xe9\xb0\x0d\xaf\xaf\xff\x8e\xc5\xce\xbc\x1a\xed\x61\xcd\xc0\x37\xa1\xf3\xf4\xdb\xda\x76\xba\xb5\x71\xbd\xb1\x92\x53\x56\x65\x0c\x40\x39\xcc\xb5\xce\xc3\xb7\xb8\x38\xc5\x3f\x0b\x54\x26\x23\x65\x4c\x8d\x41\x15\x69\x8a\x4a\x53\x9e\x56\x12\xe2\x85\x48\x4a\x93\xbb\x10\x0e\x84\x69\x94\x9c\x68\x7a\x89\x5f\x9b\x74\x74\xd4\x05\xde\xcf\xff\x7d\xe6\x8d\xa1\x90\x6c\x6c\x0c\xeb\x86\xd5\x21\xf1\x86\x5d\x55\x88\x35\x5f\xdc\x87\x81\xc4\xc4\xeb\x62\xfa\x19\xea\xb9\x48\xc6\xe0\x5b\x58\xdf\x98\xe1\xb5\xdd\xc5\x29\x6b\xb8\xcb\xfe\xb4\x02\x1f\x1c\x4b\x37\x62\x36\x4d\xf5\x5a\x89\x61\x93\x5c\x35\x17\x05\x4b\x4c\x3d\x90\xcb\x55\xdd\xa0\x05\xe8\x39\x5a\x9f\xc9\xca\x43\x53\x91\x94\x43\xa9\x22\x2e\x73\x89\x4a\x99\x90\x04\x8c\x5e\x20\x7c\x3a\x97\x05\xc7\x40\x8d\x3e\x1d\x9c\xbb\xb2\x23\x23\x25\xc4\xc4\x6c\xb3\x05\x5f\x10\x6e\xb2\x4a\x23\x02\x8a\xd1\x18\x81\x30\x26\x62\x1b\xd3\x3a\xde\xcd\x51\xce\x84\xcc\x08\x8f\x07\x7d\x2c\xe1\xf1\x51\x4b\x69\xc7\xa9\x72\x0c\x9f\x8d\x48\xa1\x67\x3f\x85\xc7\x18\x8b\x04\x4f\x0b\x8e\x27\xfc\x83\x96\x94\xa7\x81\x5a\xcd\x02\x2e\x34\x1a\xbd\x1f\x10\xe1\x67\x01\x54\xa9\x02\x61\x26\x24\x24\xa8\x09\x65\xea\xb1\x25\x56\x3d\x9e\x4c\x1a\x75\x5a\x2a\x18\xe1\xe9\x24\x15\x13\x2b\xaf\x26\x3f\xfc\x78\xf8\xe8\xc0\x4d\x10\xc7\xeb\x5a\xe5\x50\xfe\x5a\x0d\xc0\xb7\x23\xe8\x2c\x5f\x53\x05\x9c\x95\xb9\xab\x11\x94\xb5\xba\x9d\xf0\x47\xb1\xe0\x8a\x26\x28\xcd\x76\xcd\x48\x6c\xd6\x91\xef\x83\xdd\x99\xfb\x86\xed\xab\xd1\x50\x8a\x63\x97\x2c\x88\x19\x44\x0c\x79\x64\x36\x7e\x53\x52\xa8\x82\x69\xb3\x83\x89\xe9\xa5\x8d\xb9\x86\x1c\x81\x8a\xdf\xd7\x2e\x6d\x50\xc8\xd5\xc6\x45\xda\xf1\x19\x43\x1e\x10\x29\x47\xf0\xf4\x08\x0e\x3a\xfe\xaa\xdb\x8e\x4c\x9b\x25\x52\x31\x91\xe7\xe5\x6b\xe4\x43\x0c\x9a\x7e\xfe\xe7\x11\x3c\x3b\x82\x83\x68\x14\xae\xa8\xf1\x7d\x63\x30\x61\x0b\x52\x2a\xd0\xb2\xc0\x68\xb4\xa1\xd3\xd3\xfe\x3e\x33\xc2\xd4\x86\x4e\x4b\x67\x7c\xbb\x57\x55\x60\xaf\x04\x8e\xac\x40\x3f\xc9\x97\x84\x15\x08\x6a\x41\xf2\xdc\xb8\xcc\xf8\xc8\xad\x18\x93\x90\x71\xa1\xa1\x30\x99\x03\xe4\x44\x12\xc6\x90\x01\x51\x8a\xa6\xdc\xac\x82\x2d\x38\xde\xd3\x59\x0e\x47\xb0\xb7\x7c\x02\x7b\x4b\xf3\x47\xf9\x04\xf6\x4a\xf3\x87\xce\xf2\x0e\xe7\x7b\xcb\x71\xd5\x56\x8e\x61\x6f\xe9\x58\xbf\x24\xec\xc3\x82\xe4\x43\x9c\xfb\x46\xc7\xe3\x23\xf0\xcb\x27\xe0\x9b\xfe\xfe\xf2\x09\xf8\x46\x9b\x69\x89\x36\x14\xa5\xfb\xeb\xaa\xd4\x2f\xc7\x95\xec\x72\x0c\x7e\x39\x58\x90\xaa\x05\xd5\xf1\x7c\xdf\x54\xec\xfb\x53\x21\x18\x28\x4d\x34\x1a\x26\xaa\xa3\x0d\x13\x5d\x70\x99\x33\x1a\x53\x0d\x91\xf5\x33\x68\x92\x3a\x8a\xb7\x60\xcb\x29\xb0\x13\x04\xbe\x84\x61\x78\xd5\x61\xa8\x6a\x77\x4d\x6e\x52\xda\x2f\x67\xb2\x18\x5c\xd7\x2d\x5c\xf0\xf7\x3e\xc3\x55\xbb\x36\x71\x2b\x16\xe1\x7e\x4b\xf2\xea\xbe\x5b\xbd\xab\xaf\x5f\xae\xee\xb7\xa6\x60\xf5\xd9\xd0\xbd\x3d\xf4\x5a\xba\x0b\x6f\x5a\x9c\x8a\x5e\x0f\xd4\xb9\x2a\x24\x68\xe3\x1a\x72\x1b\x67\x4c\x88\x98\x31\x92\x46\xf5\xf9\x40\x2e\x4c\xa2\x20\xfb\xcb\x9f\x0e\xf5\x53\x33\x83\xf6\x0c\x46\xf8\x42\x08\x16\x78\x53\x6f\xec\x56\xdd\x18\xbc\x29\x24\x22\x56\x5e\x77\xa7\xbe\x24\x12\xa6\x60\x66\xc2\x13\xa8\x7b\xfe\x42\x64\x70\x6f\x6a\x3a\x6d\x02\xb0\x4e\x33\xb2\xc7\xc6\xfe\x21\x9f\x35\x6c\xf1\xf7\x6c\xb5\x5a\x17\x92\x6d\x12\x4c\x46\xe3\x62\x45\x26\x94\xb6\xdb\x1f\x2b\x4d\xca\x82\x52\x0a\xf9\x04\xea\xb0\xec\xd6\x71\xd3\xd0\x96\x37\x9d\xc2\xe3\xc2\xa5\xf6\x77\xa0\x74\x05\xbd\x59\xf1\x2b\x26\x88\x7e\xf4\xc3\x1d\xe8\xad\x90\x37\xab\x3d\xe1\xfa\x0e\x54\x9e\x70\xdd\xab\xee\x4e\xc6\x68\x71\x37\xab\x5c\x6d\xb5\xdf\x5c\xa7\x03\xde\xac\xf4\x23\xbd\x13\x5e\x0d\x6c\xbf\xc2\x3b\x61\xd6\x01\x3b\xa5\xfd\xf9\x67\x96\xeb\x12\x5c\x56\x04\xf1\x1c\xe3\x8b\xf6\x61\xb7\xd9\x6f\x34\x72\xc8\x4c\xac\xa1\x09\x15\x19\xd1\xd4\x94\x1d\xe5\xd7\x16\x13\x66\x57\x57\x55\x5a\xd2\xd9\x1c\x6c\x9e\xee\xb9\x10\x63\x0d\x72\x0e\x3a\x33\xc9\xf9\x4d\x29\x8b\x1a\xc1\x77\x2e\x91\xf8\xaa\x9c\xcf\x5b\x45\xf7\xc8\xf7\x23\x17\xcd\x23\x5f\x19\xa8\xdf\xbd\xdf\xbd\xce\xb1\xf4\x4a\xd1\xd1\xb7\x53\x74\xb4\x56\xd4\xeb\x1b\x89\x49\xc1\x13\xc2\xb5\x71\xef\x25\x4a\x57\x25\x4c\x51\x2f\x10\xf9\xca\x67\x84\x27\xf0\xe9\x7c\x5a\xea\x6d\xb6\xe9\x58\xe4\x65\x30\x1d\x57\x1d\x02\x35\xea\x6e\x0c\x2b\x01\x55\x05\x7c\xa7\xe4\x37\x23\xad\x86\x5c\x61\xfb\xf9\x9f\x6b\x64\x5f\x8d\x1a\xb3\xd9\x26\x2f\xd5\xb5\x49\x09\xd1\x5a\x26\x32\x25\x53\xe4\xab\xe1\xe4\xc5\xda\xa0\xc2\x13\x9e\xe0\xd2\x95\xbc\xbd\x85\x91\xad\x86\xba\x5b\x67\xa3\x12\xea\xa6\x2d\x4d\xe8\xc0\xfd\x0a\x96\xa3\x31\x94\x5d\x62\x2c\x03\x95\xdc\xb2\x1e\x66\x39\xfa\xb6\xd5\xcf\xe1\x8f\x3f\x3d\xfa\xa1\x3a\xbd\x37\xaa\x9e\x9b\xe1\x0c\xe6\x47\x9b\x06\xe0\x9b\x11\xf8\x65\xf7\x18\x63\xe9\x9d\x87\xef\x0b\x89\xd5\x65\x48\x59\xfd\xdc\xb6\x12\x6a\x32\xe0\xaf\x29\xf0\xcb\xd1\x60\x25\x54\xdf\xa5\x35\x1c\x57\xc5\x96\x6a\x65\x24\x0e\xdf\xce\x71\x4e\xd1\xd4\xab\x0b\x49\xf2\xfc\x7a\x0e\xb4\x69\x4a\x2f\xd2\xf0\x79\x92\x04\xfb\x0f\xbb\x1e\x5b\xa4\xe1\xb1\xe0\xb8\x3a\xd1\xad\x20\x5f\x15\x7c\x90\x50\x7f\x8d\xd7\xa1\x6f\x91\xb6\x96\x7a\xc9\xe3\xf0\x57\x42\xf5\xcf\x52\x14\x79\x67\xc9\x9b\x29\x59\xb7\x59\x2b\xc0\x1d\x31\x98\x30\x6e\xe2\x40\x3b\xbc\xf8\xd3\x62\x16\x9e\xc9\x82\xc7\x44\x63\x70\xd0\x55\x3c\x2d\x66\x4d\xcd\xce\x0f\x2f\x8a\xd9\x0c\xe5\x06\xbd\xae\x21\x3c\x45\x85\x7a\x50\xab\x3d\xcc\xf8\x1f\xc2\x13\x56\xb1\x52\x9d\x6e\xe8\x57\xa2\xe0\x49\x73\xf5\x1a\xd8\x56\x63\xd5\x6b\x10\x7e\x35\x33\x3f\xe4\x8c\xea\xb7\xf5\x45\x8c\xe3\xb5\x89\xdc\x12\xbc\x0e\x79\x1d\xf1\xd4\x4d\x9b\xc6\xdd\xce\x10\x6c\x25\xfd\x9c\xb1\x6d\xb0\xdf\x90\x3c\x28\x38\x35\xa5\x64\x78\x26\xce\xa8\x66\xb8\xba\x3c\xda\x04\x5e\x89\x0c\x12\xe1\xfc\x55\xd1\xb0\x8e\xbd\x5e\xe8\x8d\x36\xd9\xdd\x10\x1f\x32\xd8\x89\x6d\x47\x45\x4b\xf6\x06\x22\x9c\x6c\x9b\x86\x8f\x66\xe1\x6c\xa2\xc1\x09\x57\x02\x5f\x8b\xfa\x5a\x2c\x86\x51\xad\xc0\xd7\xa2\xf6\xba\x6c\x85\x7a\xb3\xc3\x12\x49\x16\xe1\xb1\x24\x8b\x37\x44\x5d\xb4\xa8\x35\xff\x38\x65\x63\xa0\x19\x49\x31\x7c\x6f\x2a\xb5\x2f\x57\xd7\x6f\x17\xad\xc2\x1a\xe6\xba\xb2\xde\x60\x19\x49\x4c\x71\x99\x87\x2f\x45\x96\x53\x86\x7b\xd1\x40\xbc\x5c\xc9\xbe\x29\x94\xae\xe5\xb7\x08\x98\x12\xab\x13\xbd\xb6\xae\xc0\x8b\xed\x4d\x79\x4e\xb4\x46\xc9\xaf\x95\x8c\x12\x1b\x7d\x1a\x3a\xaf\xf7\xb3\xe1\xd6\x09\x1a\xb9\xa1\x68\xdb\x31\xc1\xcf\x89\xee\x46\xbf\x9c\xe8\x4d\x0f\x0b\x22\xb3\xb7\xb6\x34\x57\xe7\xa7\x06\xc3\x5d\x4a\x5e\xb7\xb5\x7d\xe5\xd9\x56\xfe\xfe\xdd\x87\x93\xdf\xee\xdc\x02\xab\x65\xcb\xbb\xd1\xf6\xce\xb9\xed\x71\x40\x37\x4a\xaa\x31\xcc\xa4\xc8\xc6\xa0\xc5\x18\x0e\xba\x5e\x1d\x94\x36\x7b\xea\xea\x36\xf4\x25\x61\x6c\x9b\x44\x64\x53\x44\xf2\xff\x0f\xa5\xe8\xb2\x6a\xbe\x79\xe7\xe1\x2f\x84\x15\x68\x6b\x59\x97\x5e\xf7\x5d\x4f\x11\x99\xc2\xc1\x18\x72\x29\xa6\x64\xca\x4a\xc8\xd0\xe4\xc5\xfb\x0f\xa3\x51\xe8\x2e\x52\x1c\xde\x76\x21\xf2\x3f\x6a\xd0\xcd\x7b\xe2\x3f\xca\xcf\x3f\x69\x4b\xc3\x18\x93\x9c\xf1\x24\x68\xc5\xed\x88\x8b\x7d\x91\x83\x6b\xb2\xab\xa0\x09\xea\xee\x85\x8d\xb2\xc2\x1e\x64\x0e\xad\xaa\xf5\xc9\x6f\xdf\x53\x2e\x98\x96\x55\xed\xbc\x96\xad\xae\x8b\xc5\x56\x79\xe8\x12\x8e\x60\x09\x7b\x70\xd8\x59\x61\x4b\xd8\x3b\x82\x43\xb7\x8e\x1c\xf4\xbb\xe1\x33\x61\x77\xa4\x0b\x0f\xc0\xf0\x75\x2d\x79\x5f\x6f\x6a\x9b\xea\xca\xe5\x83\x07\xed\x2d\x72\x85\xb6\x7f\x2b\xb4\xfd\xfd\x6e\xa6\x5a\x1b\xe7\x97\xb7\xc0\x83\x07\x47\xd5\x49\xf5\x26\x0b\x6f\x07\xb9\xbf\x82\xdc\x80\xb9\x77\x4b\xcc\xbd\x7e\x33\x27\xb7\x84\x9c\xf4\x43\x7e\x7f\x4b\xc8\xef\xfb\x21\xef\xdd\x12\xf2\x5e\x3f\xe4\x5f\xb7\x84\xfc\xab\x1f\xf2\x8f\x5b\x42\xfe\xd1\x0f\xf9\xf4\xe9\x2d\x31\x9f\x3e\xed\x07\x7d\xf6\xec\x96\xa0\xcf\x9e\x0d\xb8\xe8\xb6\xa3\xbf\x57\x0f\xbf\x37\xdc\xd9\x57\x6b\xa7\x05\xc7\xaa\xe8\xae\xeb\xf7\xd5\x83\xd6\x3a\x6a\xda\xe3\x23\xf7\x48\x49\x81\x16\x36\x6b\xb1\xbd\x5f\x18\xe9\xea\x2d\xd7\xed\x2e\x96\x17\x61\x6d\x46\x70\xff\x77\x7e\xff\x5a\x7d\x1e\xd6\x8a\xaa\xf6\xc6\xad\xef\xba\x69\xb0\x56\x6f\xa8\xf0\xe3\x51\xcd\xe6\xee\xce\x8e\x29\xd8\xeb\xaa\x39\xcb\x99\xbb\xec\x0a\x3c\x2a\x42\x03\x6b\xfb\x49\xcf\xbe\x15\x35\xe4\xc7\x9d\x97\xa2\x71\x67\xbb\x7b\x0a\x87\x3f\x3e\x1a\x8d\x77\x77\xd6\x9b\xd3\xc0\x51\x89\xdf\x1c\x9b\x35\x6c\xe0\x7c\x24\xd3\xe1\x87\x5c\x52\xae\x83\xd9\x5f\x8c\x8f\x56\x2e\x9b\xd3\x78\xbe\x39\xf1\x37\x3d\x5e\x35\x7a\xfc\x2d\xf7\x04\x55\x39\xba\x36\x63\x16\x78\xdf\x2f\xbd\x31\x3c\x3c\x18\x5d\x3b\x1e\x5c\xab\x9e\x05\x8b\x31\xd4\x82\x4d\xd7\x55\xa6\x6d\x7c\x39\x77\xf6\xee\xf8\xdd\xe3\xea\x89\x91\x9e\x53\xb5\x61\x1f\xb6\x57\xe5\x0b\x84\x04\x63\x9a\x20\xcc\xc5\x02\xb4\xb0\x9d\xed\xb5\x58\x2e\x51\x9b\xae\x3c\xad\xb2\xed\xa8\x61\x79\x64\x76\xf1\x04\x67\xa4\x60\x3a\xb4\x7d\x4e\x34\x28\x51\xf0\x44\x01\x13\x29\x8d\x09\x73\xdb\xbf\xd2\x09\xa3\x53\x50\x65\x36\x15\x4c\x35\xde\x72\x4c\x8d\x70\xa5\x0d\x88\x3b\xf5\xae\x0f\xa6\x34\x2c\x48\x09\xc1\x5a\xc7\xc8\x2a\xb1\xe2\xa7\x34\x9d\x6b\xe0\x62\x61\x6c\x9f\x93\x4b\xac\xdf\x02\xaa\x42\x56\xd7\xd2\xfe\x2c\xd3\x40\x95\x95\x27\xb1\x2e\x08\x63\x25\x90\xd5\xc5\xdf\xd8\x5e\x59\x2b\x91\x21\x5c\x12\x49\xc9\x94\x61\xb8\xbb\x61\xb6\xaf\x3c\xe6\x37\x66\x4e\xf5\x40\x7a\x74\xed\xcc\xaa\x67\x09\x34\xa6\xff\xee\x8e\x5d\x2c\xb3\x4c\x37\x1f\xcd\x98\x9f\xab\x67\xdf\xb6\xa5\xf7\xd1\x74\xfd\xaa\xa6\x31\x2d\xfd\xc5\x18\xdc\x33\x69\xaf\x5d\x31\x6d\x12\x19\x7a\x49\xe3\xfb\xed\x92\x6d\x80\x83\xd9\xbf\x8c\x84\xd9\x16\x2c\xcc\xbe\x3d\x0d\x8c\xff\xcb\x78\x30\x06\xdd\x48\x44\x4b\xe8\x46\x26\xae\x76\xff\x3f\x00\x00\xff\xff\xe5\xf5\xc8\xf1\x06\x32\x00\x00")

func bindataRulesRulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesRulesGo,
		"rules/rules.go",
	)
}



func bindataRulesRulesGo() (*asset, error) {
	bytes, err := bindataRulesRulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "rules/rules.go",
		size: 12806,
		md5checksum: "",
		mode: os.FileMode(436),
		modTime: time.Unix(1633726528, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesRulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesRulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
