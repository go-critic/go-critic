// Code generated by go-bindata. DO NOT EDIT.
// sources:
// rules\rules.go

package rulesdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindataRulesrulesGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x5a\xe1\x72\xdb\x36\x12\xfe\x1d\x3d\xc5\x96\xc3\x26\x94\x22\x53\x89\xa7\xcd\x74\x92\x28\x37\x49\x7c\xe9\x65\x26\x49\x33\x8e\xd3\x76\x26\x75\x43\x88\x5c\xd1\x38\x83\x00\x0b\x80\x91\xd8\xd4\xef\x7e\x03\x80\xa2\x49\x5a\x64\x64\x5d\x7c\xbd\x1f\x1e\x8b\xc4\xe2\xfb\x16\xbb\xc0\x62\x17\x60\x4e\xe2\x73\x92\x22\xa4\x42\x16\x0c\xd5\x68\x44\xb3\x5c\x48\x0d\xc1\xe8\x96\x97\x52\x7d\x56\x2c\xc2\x58\x64\xb3\x3f\x0a\xa2\x28\x2b\x35\xce\x52\x71\x60\x24\xd3\x82\xc8\x64\x96\x28\xe6\x8d\xc6\xa3\xd1\x6c\x96\x88\xf8\xa1\x2a\xb2\x8c\xc8\x12\x8e\x50\x63\xac\x15\x24\xb8\x44\x29\x31\x81\x65\xc1\x63\x4d\x05\x07\x46\x35\x4a\xc2\x14\xe8\x33\xa2\x21\x26\x1c\x16\x08\x8a\x66\x39\xa3\x4b\x8a\x49\x85\xa3\x49\xaa\x00\x00\x94\x2e\x19\x02\xae\x73\x94\x34\x43\xae\x09\xab\x04\x16\xb8\x14\x12\xc1\x11\x58\xf4\x60\x0c\x9f\x61\x19\x8c\xe1\x22\x18\x57\x42\x64\xa9\x51\x42\x2d\x14\x8c\x47\x46\xd0\x3d\xbe\xe7\x8c\x64\x8b\x84\x04\x19\x24\x8a\x85\xaf\x89\x8e\xcf\x50\x8e\xe1\xf3\xe8\x56\xe6\x9e\x82\xa8\x03\xee\x2f\x03\x7f\x42\x64\xaa\x2c\x47\x34\x0e\x47\xb7\x6e\xfd\x72\x86\x12\x83\xec\x83\xb7\xf4\x4e\xc3\x37\x22\xc1\xf0\xa5\x0a\xa2\x97\x09\x72\x1d\x8d\xe1\xf6\x6d\xa8\x9a\x4e\x70\xad\xe1\x9b\x39\x78\x39\xe1\x34\xf6\xb6\xb5\x48\x8c\xc5\x27\x94\x9b\x36\x43\xe4\x9d\x86\xcf\x05\x57\xda\x52\x1d\xa3\x71\x4b\xe0\x19\x9b\x49\x5c\x49\xaa\x11\x88\x82\x4a\x4b\xa3\x9c\xd5\x2d\xf2\xc6\xa3\x81\x31\xe4\xe7\x69\xb8\xef\x40\x9a\x2a\x55\xaf\xf2\xf3\xd4\x3b\x0d\x7f\x5a\xfc\x1b\x63\x6d\x7b\xbc\x3d\x4f\xdf\x90\x0c\xa3\xf1\x2e\x3a\x6f\x94\xa9\x15\xbf\xe8\x9f\x48\xb9\xc4\x98\x68\x4c\x80\x8a\x19\x15\x85\xa6\x0c\x36\x33\xb7\x50\x24\x45\x75\xdd\xa9\xe3\x40\xc2\x63\x24\xc9\x53\xc6\x02\xd9\x9d\x35\x54\x34\xdb\xec\xcc\x71\x5d\x8e\x6a\x5d\x86\x26\x4f\x07\xde\xff\x58\x19\xba\x32\x49\xa7\x1d\x68\x73\x8c\x53\x28\x14\x36\x14\x00\xca\x95\x46\x92\x44\x2d\xd7\x36\x10\x5e\x50\x86\x83\x14\x46\x60\x1b\x87\x50\x8d\xe6\x01\x92\x5f\x8c\xeb\x2a\x96\x29\xb8\xbf\xed\x6c\xb5\x64\x0f\x5d\xa3\xfd\x0b\x83\x3a\xa2\x72\x70\x4c\x47\x54\x0e\x0c\xc9\xb6\x0e\x30\xbc\x11\xf9\x73\x26\x14\xf6\x73\xd4\x12\x3d\xce\x69\xb4\x0f\xf0\x1c\x51\x15\x13\x99\x6c\x65\xa8\xda\x7a\xf0\xeb\xd6\x1a\xbd\x77\x79\xa8\x42\xe5\x34\xa6\xa2\x50\x90\x15\x1a\xd7\xc0\x44\x7c\x3e\x2b\xb8\xf9\x07\x22\x47\x49\x4c\xf0\xed\x2e\x91\x84\x92\x94\x0b\xa5\x69\x3c\xb4\x4e\xb2\x22\x7c\x25\xe2\xf3\x60\xfc\xc8\xfc\x7c\x6f\x31\xaf\x84\xd8\x86\x90\x5b\xdb\x4d\x51\xbb\x76\x16\x24\xb1\x12\x57\x97\xcc\x6c\x06\x51\x56\xdc\x8f\x80\xf0\xc4\xfc\x3a\x8c\x80\x48\x04\x92\x24\x98\x80\x16\x90\x91\x73\x84\x5c\x28\x45\x17\x0c\x41\x5a\x13\x02\x01\x46\x39\xc2\xca\x84\x2d\x88\xb2\xc3\xc8\x18\xb1\x50\x98\x40\xb0\xa2\xfa\x0c\x88\xd3\xc3\x78\x64\x36\x03\x2e\xdc\x63\xc3\x3d\x7e\x56\xdc\xaf\x75\xf6\xb3\xe2\xb0\xd6\xb7\x13\x10\xb3\xe2\xfe\x26\x4c\xcf\xe7\x60\x5f\x1c\x56\x2f\x5a\x3e\x75\xe3\xa6\x0a\x32\xaa\x14\xe5\xe9\xb4\x72\x85\xd1\xcb\x22\x9b\xd8\x95\x65\x98\x50\xa2\x91\x95\x8e\xe5\xa9\x0e\x36\x88\xad\xc9\x63\xb5\x3b\x6e\xa9\x77\xfc\x7f\xa0\xdf\x6c\x06\x09\x5d\x2e\x51\x22\xd7\xd0\x9d\x5c\x3d\xb6\xad\x62\xfd\xd7\x18\x42\x63\x9a\x3b\x95\xa7\x90\x91\x72\x81\xe0\x70\x61\x45\x14\x50\xae\x91\x27\x98\xfc\xe3\x3a\x06\x6e\xe8\x78\x53\x2a\x1e\xef\xac\xa3\x31\xb2\x28\xcc\x5c\x37\x1d\x76\xb1\xeb\xab\xff\x46\x63\xa7\x5e\x8d\x76\xbf\xb6\xc0\x57\x31\xe7\xf1\xd7\xd5\xed\x78\x67\xe5\x7a\x63\x25\xa7\xac\xca\x18\x80\x72\x38\xd3\x3a\x0f\xdf\xe0\xea\x18\xff\x28\x50\x99\x8c\x94\x31\x35\x05\x55\xa4\x29\x2a\x4d\x79\x5a\x49\x88\x67\x22\x29\x4d\xee\x42\x38\x10\xa6\x51\x72\xa2\xe9\x27\xbc\x6e\xd2\xd1\xa1\x0b\xbc\x1f\xff\x79\xe2\x4d\xa1\x90\x6c\x6a\x14\xeb\x86\xd5\x21\xf1\x86\x5e\x55\x88\x35\x6f\xdc\x8b\x81\xc4\xc4\xeb\x62\xfa\x19\xea\x33\x91\x4c\xc1\xb7\xb0\xbe\x51\xc3\x6b\xbb\x8b\x53\xd6\x70\x97\x7d\xb4\x02\xef\x9c\x95\xbe\x88\xd9\x54\xd5\x6b\x25\x86\x4d\xe3\xaa\x33\x51\xb0\xc4\xd4\x03\xb9\xdc\xd4\x0d\x5a\x80\x3e\x43\xeb\x33\x59\x79\x68\x21\x92\x72\x28\x55\xc4\x75\x2e\x51\x29\x13\x92\x80\xd1\x73\x84\x0f\xa7\xb2\xe0\x18\xa8\xf1\x87\x7b\xa7\xae\xec\xc8\x48\x09\x31\x31\xdb\x6c\xc1\x57\x84\x9b\xac\xd2\x88\x80\x62\x34\x46\x20\x8c\x89\xd8\xc6\xb4\x8e\x77\x73\x94\x4b\x21\x33\xc2\xe3\x41\x1f\x4b\x78\x38\x6f\x91\x76\x9c\x2a\xa7\xf0\xd1\x88\x14\x7a\xf9\x43\x78\x84\xb1\x48\xf0\xb8\xe0\xf8\x92\xbf\xd3\x92\xf2\x34\x50\x9b\x59\xc0\x85\x46\xc3\xfb\x0e\x11\x7e\x14\x40\x95\x2a\x10\x96\x42\x42\x82\x9a\x50\xa6\x1e\x5a\xc3\xaa\x87\xb3\x59\xa3\x4e\x4b\x05\x23\x3c\x9d\xa5\x62\x66\xe5\xd5\xec\xbb\xef\x0f\x1f\xdc\x73\x13\xc4\xd9\xf5\x92\x72\x28\x7f\xad\x06\xe0\xdb\x11\x74\x96\xaf\xa9\x02\x4e\xca\xdc\xd5\x08\xca\x6a\xdd\x4e\xf8\xa3\x58\x70\x45\x13\x94\x66\xbb\x66\x24\x36\xeb\xc8\xf7\xc1\xee\xcc\x7d\xc3\xf6\xd5\x78\x28\xc5\xb1\x4b\x16\xc4\x12\x22\x86\x3c\x32\x1b\xbf\x29\x29\x54\xc1\xb4\xd9\xc1\xc4\xe2\x93\x8d\xb9\xc6\x38\x02\x15\xbf\xa3\x5d\xda\xa0\x90\xab\xad\x8b\xb4\xe3\x33\x86\x3c\x20\x52\x8e\xe1\xf1\x1c\xee\x75\xfc\x55\xb7\xcd\x4d\x9b\x35\xa4\x62\x22\xcf\xcb\x57\xc8\x87\x2c\x68\xfa\xf9\x1f\xc7\xf0\x64\x0e\xf7\xa2\x71\xb8\x31\x8d\xef\x1b\x85\x09\x5b\x91\x52\x81\x96\x05\x46\xe3\x2d\x9d\x1e\xf7\xf7\x59\x12\xa6\xb6\x74\x5a\x3b\xe5\xdb\xbd\xaa\x02\x7b\x23\x30\xb7\x02\xfd\x46\xfe\x44\x58\x81\xa0\x56\x24\xcf\x8d\xcb\x8c\x8f\xdc\x8a\x31\x09\x19\x17\x1a\x0a\x93\x39\x40\x4e\x24\x61\x0c\x19\x10\xa5\x68\xca\xcd\x2a\xd8\xc1\xc6\x13\x9d\xe5\x30\x87\xc9\xfa\x11\x4c\xd6\xe6\x47\xf9\x08\x26\xa5\xf9\xa1\xb3\xbc\x63\xf3\xc9\x7a\x5a\xb5\x95\x53\x98\xac\x9d\xd5\x3f\x11\xf6\x6e\x45\xf2\x21\x9b\xfb\x86\xe3\xe1\x1c\xfc\xf2\x11\xf8\xa6\xbf\xbf\x7e\x04\xbe\x61\x33\x2d\xd1\x96\xa2\xf4\xe0\xb2\x2a\xf5\xcb\x69\x25\xbb\x9e\x82\x5f\x0e\x16\xa4\x6a\x45\x75\x7c\x76\x60\x2a\xf6\x83\x85\x10\x0c\x94\x26\x1a\x8d\x25\xaa\xa3\x0d\x13\x5d\x70\x9d\x33\x1a\x53\x0d\x91\xf5\x33\x68\x92\x3a\x13\xef\x60\x2d\x47\x60\x27\x08\x7c\x0e\xc3\xf0\xa2\x63\xa1\xaa\xdd\x35\xb9\x49\x69\xdf\x9c\xc8\x62\x70\x5d\xb7\x70\xc1\x9f\x7c\x84\x8b\x76\x6d\xe2\x56\x2c\xc2\x9d\x96\xe4\xc5\x1d\xb7\x7a\x37\x6f\x3f\x5f\xdc\x69\x4d\xc1\xea\xb5\x31\xf7\xee\xd0\x97\xd2\x5d\x78\xd3\xe2\x28\x7a\x3d\x50\xe7\xaa\x90\xa0\x8d\x6b\xc8\x6d\x9c\x31\x21\x62\xc9\x48\x1a\xd5\xe7\x03\xb9\x30\x89\x82\xec\x2f\x7f\x3a\xa6\x5f\x98\x19\x34\x31\x18\xe1\x33\x21\x58\xe0\x2d\xbc\xa9\x5b\x75\x53\xf0\x16\x90\x88\x58\x79\xdd\x9d\xfa\x13\x91\xb0\x00\x33\x13\x1e\x41\xdd\xf3\x67\x22\x83\xdb\x0b\xd3\x69\x1b\x80\x75\x9a\x91\x3d\x32\xfa\x0f\xf9\xac\xa1\x8b\x3f\xb1\xd5\x6a\x5d\x48\xb6\x8d\x60\x32\x1a\x17\x2b\x32\xa1\xb4\xdd\xfe\x58\x69\x52\x16\x94\x52\xc8\x47\x50\x87\x65\xb7\x8e\x9b\x8a\xb6\xbc\xe9\x08\x8f\x0a\x97\xda\xdf\x00\xe9\x06\x7a\x3b\xf1\x0b\x26\x88\x7e\xf0\xdd\x0d\xf0\x56\xc8\xdb\x69\x5f\x72\x7d\x03\x94\x2f\xb9\xee\xa5\xbb\x91\x31\x5a\xdc\xed\x94\x9b\xad\xf6\xab\x73\x3a\xe0\xed\xa4\xef\xe9\x8d\xd8\xd5\xc0\xf6\x13\xde\x88\x65\x1d\xb0\x23\xed\xcf\x3f\xb3\x5c\x97\xe0\xb2\x22\x88\xcf\x30\x3e\x6f\x1f\x76\x9b\xfd\x46\x23\x87\xcc\xc4\x1a\x9a\x50\x91\x11\x4d\x4d\xd9\x51\x5e\xb7\x98\x30\xbb\xba\xaa\xd2\x92\xce\xe6\x60\xf3\x74\xcf\x85\x18\xab\x90\x73\xd0\x89\x49\xce\xbf\x94\xb2\xa8\x31\x7c\xe3\x12\x89\x6b\xe5\x7c\xde\x26\xba\x47\xbe\x1f\xb9\x68\x1e\xf9\xca\x40\xfd\xe6\xfd\xe6\x75\x8e\xa5\x37\x44\xf3\xaf\x47\x34\xbf\x24\xea\xf5\x8d\xc4\xa4\xe0\x09\xe1\xda\xb8\xf7\x13\x4a\x57\x25\x2c\x50\xaf\x10\xf9\xc6\x67\x84\x27\xf0\xe1\x74\x51\xea\x5d\xb6\xe9\x58\xe4\x65\xb0\x98\x56\x1d\x02\x35\xee\x6e\x0c\x1b\x01\x55\x05\x7c\x47\xf2\xab\x91\x56\x43\xae\xb0\xfd\xfc\x8f\x35\xb2\xaf\xc6\x8d\xd9\x6c\x93\x97\xea\xda\xa4\x84\xe8\x52\x26\x32\x25\x53\xe4\xab\xe1\xe4\xc5\xea\xa0\xc2\x97\x3c\xc1\xb5\x2b\x79\x7b\x0b\x23\x5b\x0d\x75\xb7\xce\x46\x25\xd4\x4d\x5b\x9a\xd0\x81\x7b\x0a\xd6\xe3\x29\x94\x5d\xc3\x58\x0b\x54\x72\xeb\x7a\x98\xe5\xf8\xeb\x56\x3f\x87\xdf\xff\xf0\xe0\xbb\xea\xf4\xde\x50\x3d\x35\xc3\x19\xcc\x8f\xb6\x0d\xc0\x37\x23\xf0\xcb\xee\x31\xc6\xda\x3b\x0d\xdf\x16\x12\xab\xcb\x90\xb2\x7a\xdc\xb5\x12\x6a\x5a\xc0\xbf\x34\x81\x5f\x8e\x07\x2b\xa1\xfa\x2e\xad\xe1\xb8\x2a\xb6\x54\x2b\x23\x71\xf8\x76\x8e\x73\x8a\xa6\x5e\x5d\x49\x92\xe7\x57\x73\xa0\x6d\x53\x7a\x95\x86\x4f\x93\x24\x38\xb8\xdf\xf5\xd8\x2a\x0d\x8f\x04\xc7\xcd\x89\x6e\x05\xf9\xa2\xe0\x83\x06\xf5\x2f\xf1\x3a\xe6\x5b\xa5\xad\xa5\x5e\xf2\x38\xfc\x85\x50\xfd\xa3\x14\x45\xde\x59\xf2\x66\x4a\xd6\x6d\x56\x0b\x70\x47\x0c\x26\x8c\x9b\x38\xd0\x0e\x2f\xfe\xa2\x58\x86\x27\xb2\xe0\x31\xd1\x18\xdc\xeb\x12\x2f\x8a\x65\x93\xd9\xf9\xe1\x59\xb1\x5c\xa2\xdc\xc2\xeb\x1a\xc2\x63\x54\xa8\x07\x59\xed\x61\xc6\xbf\x08\x4f\x58\x65\x95\xea\x74\x43\xbf\x10\x05\x4f\x9a\xab\xd7\xc0\xb6\x1a\xab\x5e\x83\xf0\x9b\x99\xf9\x2e\x67\x54\xbf\xa9\x2f\x62\x9c\x5d\x9b\xc8\x2d\xc1\xab\x90\x57\x11\x8f\xdd\xb4\x69\xdc\xed\x0c\xc1\x56\xd2\x4f\x19\xdb\x05\xfb\x35\xc9\x83\x82\x53\x53\x4a\x86\x27\xe2\x84\x6a\x86\x9b\xcb\xa3\x6d\xe0\x95\xc8\xa0\x21\x9c\xbf\x2a\x33\x5c\xc6\x5e\x2f\xf4\xc6\xdb\xf4\x6e\x88\x0f\x29\xec\xc4\x76\x33\x45\x4b\xf6\x0b\x86\x70\xb2\x6d\x33\xbc\x37\x0b\x67\x9b\x19\x9c\x70\x25\x70\x5d\xd4\x57\x62\x35\x8c\x6a\x05\xae\x8b\xda\xeb\xb2\x0d\xea\x97\x1d\x96\x48\xb2\x0a\x8f\x24\x59\xbd\x26\xea\xbc\x65\x5a\xf3\xc7\x29\x9b\x02\xcd\x48\x8a\xe1\x5b\x53\xa9\x7d\xbe\xb8\x7a\xbb\x68\x09\x6b\x98\xab\x64\xbd\xc1\x32\x92\x98\xe2\x3a\x0f\x9f\x8b\x2c\xa7\x0c\x27\xd1\x40\xbc\xdc\xc8\xbe\x2e\x94\xae\xe5\x77\x08\x98\x12\xab\x13\xbd\x36\x57\xe0\xc5\xf6\xa6\x3c\x27\x5a\xa3\xe4\x57\x4a\x46\x89\x8d\x3e\x0d\xce\xab\xfd\x6c\xb8\x75\x82\x46\x6e\x28\xda\x76\x54\xf0\x73\xa2\xbb\xd1\x2f\x27\x7a\xdb\x87\x05\x91\xd9\x5b\x5b\xcc\xd5\xf9\xa9\xc1\x70\x97\x92\x57\x75\x6d\x5f\x79\xb6\xc9\xdf\xfe\xf4\xee\xe5\xaf\x37\xae\x81\x65\xd9\xf1\x6e\xb4\xbd\x73\xee\x7a\x1c\xd0\x8d\x92\x6a\x0a\x4b\x29\xb2\x29\x68\x31\x85\x7b\x5d\xaf\x0e\x4a\x9b\x3d\x75\x73\x1b\xfa\x9c\x30\xb6\x4b\x22\xb2\x2d\x22\xf9\x7f\xa2\x14\x5d\xab\x9a\x77\xde\x69\xf8\x33\x61\x05\xda\x5a\xd6\xa5\xd7\x7d\xd7\x53\x44\xa6\x70\x6f\x0a\xb9\x14\x0b\xb2\x60\x25\x64\x68\xf2\xe2\x83\xfb\xd1\x38\x74\x17\x29\x0e\x6f\xb7\x10\xf9\x3f\x55\xe8\xcb\x7b\xe2\xdf\x6a\x9f\xbf\x53\x97\x86\x32\x26\x39\xe3\x49\xd0\x8a\xdb\x11\x17\x07\x22\x07\xd7\x64\x57\x41\x13\xd4\xdd\x0b\x1b\xb2\xc2\x1e\x64\x0e\xad\xaa\xcb\x93\xdf\xbe\x4f\xb9\x60\x51\x56\xb5\xf3\xa5\x6c\x75\x5d\x2c\x76\xca\x43\xd7\x30\x87\x35\x4c\xe0\xb0\xb3\xc2\xd6\x30\x99\xc3\xa1\x5b\x47\x0e\xfa\xa7\xe1\x33\x61\x77\xa4\x0b\x77\xc1\xd8\xeb\x4a\xf2\x7e\xb9\xa9\x6d\xab\x2b\xd7\x77\xef\xb6\xb7\xc8\x0d\xda\xc1\x5e\x68\x07\x07\xdd\x4c\xb5\x56\xce\x2f\xf7\xc0\x83\xbb\xf3\xea\xa4\x7a\x9b\x86\xfb\x41\x1e\x6c\x20\xb7\x60\x4e\xf6\xc4\x9c\xf4\xab\x39\xdb\x13\x72\xd6\x0f\xf9\xed\x9e\x90\xdf\xf6\x43\xde\xde\x13\xf2\x76\x3f\xe4\x5f\x7b\x42\xfe\xd5\x0f\xf9\xfb\x9e\x90\xbf\xf7\x43\x3e\x7e\xbc\x27\xe6\xe3\xc7\xfd\xa0\x4f\x9e\xec\x09\xfa\xe4\xc9\x80\x8b\xf6\x1d\xfd\xed\x7a\xf8\xbd\xe1\xce\x7e\xb5\x76\x5c\x70\xac\x8a\xee\xba\x7e\x3f\x50\xf4\x4f\x4c\xea\x98\x69\x0f\x8f\xaa\x8f\x07\xec\xf7\x48\xae\xe7\xb3\x52\xd7\xdf\xbb\xed\x77\xa9\xbc\x0a\x6b\x15\x82\x3b\xe4\xce\x95\xd2\x3c\xac\x79\x5c\x73\xe3\xbe\xf7\xb2\x65\xb0\x4a\x6f\x10\xf8\xf1\xb8\xb6\xe3\xe8\xd6\x2d\x53\xaa\xd7\xf5\x72\x96\x33\x77\xcd\x15\x78\x54\x84\x06\xd6\xf6\x93\x9e\xfd\x4a\xd4\x98\x3d\xee\x7c\x23\x1a\x77\x36\xba\xc7\x70\xf8\xfd\x83\xf1\x74\x74\xeb\x72\x5b\x1a\x38\x24\xf1\x9b\x43\xb3\x8a\x8d\x2e\x46\xff\x09\x00\x00\xff\xff\xdc\xa0\xf0\xa4\xb4\x2c\x00\x00")

func bindataRulesrulesGoBytes() ([]byte, error) {
	return bindataRead(
		_bindataRulesrulesGo,
		"rules/rules.go",
	)
}

func bindataRulesrulesGo() (*asset, error) {
	bytes, err := bindataRulesrulesGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name:        "rules/rules.go",
		size:        11444,
		md5checksum: "",
		mode:        os.FileMode(438),
		modTime:     time.Unix(1627888882, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"rules/rules.go": bindataRulesrulesGo,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"rules": {Func: nil, Children: map[string]*bintree{
		"rules.go": {Func: bindataRulesrulesGo, Children: map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
